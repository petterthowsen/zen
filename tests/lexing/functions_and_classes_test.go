package lexing

import (
	"testing"
	"zen/lang/lexing"
)

func TestFunctionsAndClasses(t *testing.T) {
	expected := []TokenAssert{
		// func greet(name:string) { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "greet"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.IDENTIFIER, Literal: "print"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.STRING, Literal: "Hello, "},
		{Type: lexing.PLUS, Literal: "+"},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},

		// func hello(name:string = "John") { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "hello"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.ASSIGN, Literal: "="},
		{Type: lexing.STRING, Literal: "John"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.IDENTIFIER, Literal: "print"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.STRING, Literal: "Hello, "},
		{Type: lexing.PLUS, Literal: "+"},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},

		// func add(a:int, b:int):int { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "add"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "a"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "int"},
		{Type: lexing.COMMA, Literal: ","},
		{Type: lexing.IDENTIFIER, Literal: "b"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "int"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "int"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.KEYWORD, Literal: "return"},
		{Type: lexing.IDENTIFIER, Literal: "a"},
		{Type: lexing.PLUS, Literal: "+"},
		{Type: lexing.IDENTIFIER, Literal: "b"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},

		// func log(message:string, level:string?) { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "log"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "message"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.COMMA, Literal: ","},
		{Type: lexing.IDENTIFIER, Literal: "level"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.QMARK, Literal: "?"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.KEYWORD, Literal: "if"},
		{Type: lexing.IDENTIFIER, Literal: "level"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.IDENTIFIER, Literal: "print"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "level"},
		{Type: lexing.PLUS, Literal: "+"},
		{Type: lexing.STRING, Literal: ": "},
		{Type: lexing.PLUS, Literal: "+"},
		{Type: lexing.IDENTIFIER, Literal: "message"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},
		{Type: lexing.KEYWORD, Literal: "else"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.IDENTIFIER, Literal: "print"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "message"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},

		// class Person { ... }
		{Type: lexing.KEYWORD, Literal: "class"},
		{Type: lexing.IDENTIFIER, Literal: "Person"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.IDENTIFIER, Literal: "age"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "int"},

		// func init(name:string, age:int) { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "init"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.COMMA, Literal: ","},
		{Type: lexing.IDENTIFIER, Literal: "age"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "int"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.KEYWORD, Literal: "this"},
		{Type: lexing.DOT, Literal: "."},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.ASSIGN, Literal: "="},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.KEYWORD, Literal: "this"},
		{Type: lexing.DOT, Literal: "."},
		{Type: lexing.IDENTIFIER, Literal: "age"},
		{Type: lexing.ASSIGN, Literal: "="},
		{Type: lexing.IDENTIFIER, Literal: "age"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},

		// func greet():string { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "greet"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.KEYWORD, Literal: "return"},
		{Type: lexing.STRING, Literal: "Hi, I'm "},
		{Type: lexing.PLUS, Literal: "+"},
		{Type: lexing.KEYWORD, Literal: "this"},
		{Type: lexing.DOT, Literal: "."},
		{Type: lexing.IDENTIFIER, Literal: "name"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},

		// class FileSystem implements FileSystemInterface { ... }
		{Type: lexing.KEYWORD, Literal: "class"},
		{Type: lexing.IDENTIFIER, Literal: "FileSystem"},
		{Type: lexing.KEYWORD, Literal: "implements"},
		{Type: lexing.IDENTIFIER, Literal: "FileSystemInterface"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},

		// func read(file:string):string { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "read"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "file"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.KEYWORD, Literal: "return"},
		{Type: lexing.STRING, Literal: "file contents"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},

		// func write(file:string, contents:string) { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "write"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "file"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.COMMA, Literal: ","},
		{Type: lexing.IDENTIFIER, Literal: "contents"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "string"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.IDENTIFIER, Literal: "print"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.STRING, Literal: "writing to "},
		{Type: lexing.PLUS, Literal: "+"},
		{Type: lexing.IDENTIFIER, Literal: "file"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},

		// class Config { ... }
		{Type: lexing.KEYWORD, Literal: "class"},
		{Type: lexing.IDENTIFIER, Literal: "Config"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.IDENTIFIER, Literal: "debug"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "bool"},
		{Type: lexing.ASSIGN, Literal: "="},
		{Type: lexing.KEYWORD, Literal: "false"},
		{Type: lexing.IDENTIFIER, Literal: "port"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "int"},
		{Type: lexing.ASSIGN, Literal: "="},
		{Type: lexing.INT, Literal: "8080"},

		// func init(debug:bool?) { ... }
		{Type: lexing.KEYWORD, Literal: "func"},
		{Type: lexing.IDENTIFIER, Literal: "init"},
		{Type: lexing.LEFT_PAREN, Literal: "("},
		{Type: lexing.IDENTIFIER, Literal: "debug"},
		{Type: lexing.COLON, Literal: ":"},
		{Type: lexing.KEYWORD, Literal: "bool"},
		{Type: lexing.QMARK, Literal: "?"},
		{Type: lexing.RIGHT_PAREN, Literal: ")"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.KEYWORD, Literal: "if"},
		{Type: lexing.IDENTIFIER, Literal: "debug"},
		{Type: lexing.LEFT_BRACE, Literal: "{"},
		{Type: lexing.KEYWORD, Literal: "this"},
		{Type: lexing.DOT, Literal: "."},
		{Type: lexing.IDENTIFIER, Literal: "debug"},
		{Type: lexing.ASSIGN, Literal: "="},
		{Type: lexing.IDENTIFIER, Literal: "debug"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},
		{Type: lexing.RIGHT_BRACE, Literal: "}"},
	}

	LoadAndAssertTokens(t, "functions_and_classes.zen", expected)
}
